//pagedown bootstrap (https://github.com/hughevans/pagedown-bootstrap-rails)

//= require marked
//= require marked.editor


//sync title input and title on demo post; has to be fired on document ready or it won't find the proper elements

String.prototype.titleize = function() {
    return $.trim(this.toLowerCase().replace(/(?:^|\s)\S/g, function(a) { return a.toUpperCase(); }));
};

String.prototype.categoryUrl = function() {
    return $.trim(this.toLowerCase());
};


jQuery(document).ready(function(){
	//Titleize the inputs
	var tagElement = $('#post_tag_list');
	tagElement.val(tagElement.val().titleize());
	//Sync title with title field
	$('#post_title').bind('input propertychange', function() {
	    $('#title').text(this.value);
	});
	//Sync category with category field
	var categoryText;
	$('#post_category_list').change(function()
	{
		categoryText = this.value;
		$('#category').attr('href', '/category/'+categoryText.categoryUrl());
		$('#category').text(categoryText.titleize());
	})
	$('#post_category_list').change(); //Set initial value
	//Sync tags with tag field
	var tagList, tagListField, tagHash, tagUrl;
	$('#post_tag_list').bind('input propertychange', function()
	{
		tagHash = {}
		tagList = this.value.split(',');
		tagListField = $('#tags');
		tagListField.empty(); 
		//apend only if not == '' and if not found in hashtable (duplicate values)
		tagList.forEach(function(tag) {
			tagUrl = tag.categoryUrl();
			if (tag != '' && !tagHash[tagUrl])
			{
		    	tagListField.append('<a class="tag" href="/tag/'+tagUrl+'">'+tag.titleize()+'</a>  ');
		    	tagHash[tagUrl] = true;
			}
		});
	})
	//initialize marked, which is required for the editor to work
	marked.setOptions({
	  gfm: true,
	  tables: true,
	  breaks: true,
	  pedantic: false,
	  sanitize: false,
	  smartLists: false,
	  smartypants: false,
	});
	editor = new Markdown.Editor('#post_content_html');

// 	editor.hooks.set("insertImageDialog", function (callback) {
//     alert("Please click okay to start scanning your brain...");
//     callback(null); //callback is what actually sets the value
//     return true; // tell the editor that we'll take care of getting the image url
// });

    return editor.run();
 });

	//tagElement = $('#post_category_list');
	//tagElement.val(tagElement.val().titleize());

	//Old comment sync for text box
	//var commaIndex, categoryText;
	//$('#post_category_list').bind('input propertychange', function()
	//{
	//	commaIndex = this.value.indexOf(',');
	//	if (commaIndex == -1) categoryText = this.value;
	//	else categoryText = this.value.substring(0, commaIndex);
	//	$('#category').attr('href', '/category/'+categoryText.categoryUrl());
	//	$('#category').text(categoryText.titleize());
	//})


var first = true, saved = false, current=false;
function openLocation(){
	$('#location_button').hide()
	$('#location_select').show(400, function(){
		if (first){
			first = false;
			mapInit();
		}
		map.setCenter(marker.getPosition());
	});
	locationOpen = true;
}

function saveLocation(){
	latLng = marker.getPosition();
	latText.text("Lat: "+latLng.lat().toFixed(6));
	lngText.text("Lng: "+latLng.lng().toFixed(6));
	saved = latLng;
	updateCurrent();
}

function revertLocation(){
	placeMarker(saved)
	map.setCenter(saved)
}

function updateCurrent(){
	current = marker.getPosition().equals(saved)
	if (current){
		marker.setIcon(iconBase+"pushpin.png")
	}
	else {
		marker.setIcon(iconBase+"dot.png")
	}
}





var map, marker, addressField, geocoder, latText, lngText;
var iconBase = window.location.protocol+"//"+window.location.host+"/assets/";

$(document).ready(function(){
	  addressField = document.getElementById('search_address');
	  latText = $('#lat')
	  lngText = $('#lng')
	  geocoder = new google.maps.Geocoder();
});
function mapInit() {
var map_canvas = document.getElementById('map_select_canvas');
var map_options = {
  center: new google.maps.LatLng(<%= MAPS_DEFAULT_LAT %>, <%= MAPS_DEFAULT_LNG %>),
  zoom: 13,
  mapTypeId: google.maps.MapTypeId.HYBRID
}
map = new google.maps.Map(map_canvas, map_options)
marker = new google.maps.Marker({
    position: new google.maps.LatLng(<%= MAPS_DEFAULT_LAT %>, <%= MAPS_DEFAULT_LNG %>),
    map: map,
    icon: iconBase + "dot.png",
    title: 'Post Location',
    animation: google.maps.Animation.DROP
});
  google.maps.event.addListener(map, 'rightclick', function(event) {
	  placeMarker(event.latLng)
    });
};

function placeMarker(latLng){
	marker.setAnimation(google.maps.Animation.DROP)
	marker.setPosition(latLng)
	updateCurrent()
}

function search() {
    geocoder.geocode(
        {address: addressField.value,
    	region:'JP',
    	 latLng: map.center}, 
        function(results, status) { 
            if (status == google.maps.GeocoderStatus.OK) { 
            	console.log(results)
                var loc = results[0].geometry.location;
                placeMarker(loc)
		        map.setCenter(loc)
		      	if (map.getZoom() < 13)
		      	{
		      		map.setZoom(13)
		      	}
            } 
            else {
                alert("Not found: " + status)
                //maybe add the red problem style to the search div if it's not found isntead of alert 
            } 
        }
    );
};

console.log("<%=@title%>")